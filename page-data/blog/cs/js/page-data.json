{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/cs/js",
    "result": {"data":{"markdownRemark":{"html":"<h3 id=\"-함수-표현식-function-expression\" style=\"position:relative;\">🗡 함수 표현식 Function Expression<a href=\"#-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D-function-expression\" aria-label=\" 함수 표현식 function expression permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><strong>( keyword )</strong></p>\n<p><code class=\"language-text\">고차함수</code> <code class=\"language-text\">호이스팅</code></p>\n<p><strong>( 핵심 )</strong></p>\n<p>표현식은 변수에 값을 할당하는 것처럼 <strong>함수를 할당</strong>한다. 호이스팅이 일어나지 않고 클로저, 콜백으로 활용된다.</p>\n<p><strong>( TMI )</strong></p>\n<ul>\n<li>자바스크립트에서 함수는 값이다. 즉, <code class=\"language-text\">work()</code> 대신 <code class=\"language-text\">work</code> 쓰면 함수가 실행이 안된다.</li>\n<li>클로저로 활용될 수 있다. 함수가 독립된 구문 형태로 존재하기 때문이다.</li>\n<li>콜백(다른 함수 인자)으로 사용될 수 있다.</li>\n<li>IIFE : 즉시 주입 함수 표현식\n<ul>\n<li><code class=\"language-text\">(() => {console.log(\"do\")})()</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>( 꼬리질문 )</strong></p>\n<details>\n<summary>&nbsp; 함수표현식과 함수선언식은 어떤 차이가 있을까요?</summary>\n<p>\n<ul>\n<li>함수 선언식은 호이스팅에 영향을 받지만, 함수 표현식은 호이스팅에 영향을 받지 않는다.</li>\n</ul>\n<p>함수 표현식</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">work</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"working\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<p>함수 선언식</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 호이스팅이 일어난다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"working\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 익명함수는 표현식으로 사용될 수 있나요?</summary>\n<p>\n<ul>\n<li>익명함수는 변수명이 없기에 표현식으로 사용될 수 없다.</li>\n<li>선언식으로 사용될 수 있지만 간편한 arrow function으로 많이 쓴다.</li>\n</ul>\n</p>\n</details>\n<br>\n<br>\n<br>\n<h3 id=\"-화살표-함수-arrow-function\" style=\"position:relative;\">🗡 화살표 함수 Arrow Function<a href=\"#-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-arrow-function\" aria-label=\" 화살표 함수 arrow function permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><strong>( keyword )</strong></p>\n<p><code class=\"language-text\">간결</code> <code class=\"language-text\">컨텍스트 없음</code></p>\n<p><strong>( 핵심 )</strong></p>\n<p>함수를 화살표로 단순하고 간결한 문법으로 만들어 지고 실행 컨택스트도 갖지 않는다.</p>\n<p><strong>( 근거 )</strong></p>\n<ul>\n<li>실행 컨택스트가 생성되지 않으니 this, arguments, new, super도 없다.</li>\n</ul>\n<p><strong>( 꼬리질문 )</strong></p>\n<br>\n<br>\n<br>\n<br>\n<h3 id=\"-참고\" style=\"position:relative;\">🗡 참고<a href=\"#-%EC%B0%B8%EA%B3%A0\" aria-label=\" 참고 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/function-expressions-vs-declarations/\">https://joshua1988.github.io/web-development/javascript/function-expressions-vs-declarations/</a></li>\n<li><a href=\"https://ko.javascript.info/function-expressions#ref-127\">https://ko.javascript.info/function-expressions#ref-127</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D-function-expression\">🗡 함수 표현식 Function Expression</a></li>\n<li><a href=\"#-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-arrow-function\">🗡 화살표 함수 Arrow Function</a></li>\n<li><a href=\"#-%EC%B0%B8%EA%B3%A0\">🗡 참고</a></li>\n</ul>","excerpt":"🗡 함수 표현식 Function Expression ( keyword )   ( 핵심 ) 표현식은 변수에 값을 할당하는 것처럼 함수를 할당한다. 호이스팅이 일어나지 않고 클로저, 콜백으로 활용된다. ( TMI…","frontmatter":{"date":"2021.10.14","path":"/blog/cs/js","title":"( 면접대비 ) Javascript","tags":["CS","면접"],"series":"면접 대비하기"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},
    "staticQueryHashes": ["210451802","3139552914","3649515864","63159454"]}