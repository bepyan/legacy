{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/cs/database",
    "result": {"data":{"markdownRemark":{"html":"<br>\n<br>\n<h3 id=\"-개요\" style=\"position:relative;\">🗡 개요<a href=\"#-%EA%B0%9C%EC%9A%94\" aria-label=\" 개요 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<br>\n<details>\n<summary>&nbsp; DB를 사용하는 이유가 뭔가요?</summary>\n<p>\n<ul>\n<li>어플리케이션으로 부터의 독립</li>\n<li>데이터 무결성\n<ul>\n<li>동시 접근 제어</li>\n</ul>\n</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; DBMS에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>DB Manage System</li>\n<li>인덱스</li>\n<li>트랜잭션 (동시 접근)</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 데이터베이스에서의 인덱스에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>추가공간, 검색속도</li>\n<li>주소위치-값 매핑, 정렬,</li>\n<li>Hash Table, B+ Tree</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 인덱스를 Hash Table, B+ Tree로 구현에 있어서의 차이를 설명해주세요.</summary>\n<p>\n<ul>\n<li>값에 대한 비교</li>\n<li>O(1) O(Log(n))</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 인덱스는 무조건 검색 속도를 향상시키나요?</summary>\n<p>\n<ul>\n<li>아니다\n<ul>\n<li>해당 secondary 인덱스에 대한 질의가 전체 데이터의 20% 이상을 리턴하게 되는 경우, 인덱스를 활용하지 않는 full table scan이 더 효율적이다.</li>\n<li>Secondary index 탐색 → Primary index 탐색 → RID로 실제 데이터에 접근한다.</li>\n</ul>\n</li>\n<li>쿼리옵티마이저\n<ul>\n<li>위 경우를 판단하고, 인덱스를 사용한 검색을 수행할지 말지 결정</li>\n</ul>\n</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 클러스터 인덱스와 결합 인덱스에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>비슷한 데이터 인접</li>\n<li>2개이상의 칼럼</li>\n</ul>\n</p>\n</details>\n<br>\n<br>\n<br>\n<h3 id=\"-rdbms\" style=\"position:relative;\">🗡 RDBMS<a href=\"#-rdbms\" aria-label=\" rdbms permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<br>\n<details>\n<summary>&nbsp; RDBMS에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>테이블간의 관계를 갖음</li>\n<li>SQL, Query</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; SQL</summary>\n<p>\n<ul>\n<li>데이터가 고정된 열과 행을 가지고 있는 테이블</li>\n</ul>\n</p>\n</details>\n<br>\n<br>\n<h4 id=\"트랜잭션\" style=\"position:relative;\">트랜잭션<a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98\" aria-label=\"트랜잭션 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<br>\n<details>\n<summary>&nbsp; RDBMS의 트랜잭션에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>DB의 상태를 변화시키는 일련의 연산</li>\n<li>ACID\n<ul>\n<li>원자성</li>\n<li>일관성 (Consistency)</li>\n<li>독립성</li>\n<li>지속성</li>\n</ul>\n</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 트랜잭션의 상태에 대해서 설명해주세요.</summary>\n<p>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FCWSqM%2FbtqLlBbdCmE%2FuChTYZXD1wgWI9vvJ1kTn1%2Fimg.png\" alt=\"트랜잭션 상태\"></p>\n<ul>\n<li>부분 완료\n<ul>\n<li>트랜잭션 연산을 실행했지만 commit 직전인 상태</li>\n</ul>\n</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 동시에 트랜잭션이 발생되면 어떻게 해결할 수 있는가?</summary>\n<p>\n<ul>\n<li>Lock을 사용하여 쓰레드를 직렬화 (Lock을 가진 트랜잭션이 동작을 수행)</li>\n<li></li>\n<li>스냅샷</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 트랜잭션의 격리수준에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>여러 트랜잭션이 처리될 때, 트랜잭션끼리 얼마나 서로 고립시킬지 정한 수준 (동시처리 성능과 trade-off)</li>\n</ul>\n<br>\n<ul>\n<li><code class=\"language-text\">READ UNCOMMITTED</code>\n<ul>\n<li>한 트랜잭션에서 커밋하지 않은 데이타에 다른 트랜잭션이 접근</li>\n<li>Dirty Read, Non-Repeatable Read, Phantom Read</li>\n</ul>\n</li>\n<li><code class=\"language-text\">READ COMMITTED</code>\n<ul>\n<li>커밋이 완료된 데이타만 읽을 수 있다.</li>\n<li>Non-Repeatable Read, Phantom Read</li>\n</ul>\n</li>\n<li><code class=\"language-text\">REPEATABLE READ</code>\n<ul>\n<li>Phantom Read</li>\n</ul>\n</li>\n<li><code class=\"language-text\">SERIALIZABLE</code>\n<ul>\n<li>INSERT 문제</li>\n</ul>\n</li>\n</ul>\n<br>\n<p>발생되는 문제</p>\n<ul>\n<li>Dirty Read\n<ul>\n<li>T1가 최종 커밋 전에 T2가 해당 데이터를 읽는 것.</li>\n</ul>\n</li>\n<li>Non-Repeatable Read\n<ul>\n<li>T1에서 Read할 때 T2에서 변경하면 T1은 변경된 데이터를 읽게 된다.</li>\n</ul>\n</li>\n<li>Phantom Read</li>\n</ul>\n<br>\n<p>Lock</p>\n<ul>\n<li>\n<p>S Lock</p>\n<ul>\n<li>쓰기 가능</li>\n</ul>\n</li>\n<li>\n<p>X Lock</p>\n<ul>\n<li>모두 차단</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://velog.io/@sa1341/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80Isolation-Level%EC%9D%B4%EB%9E%80\">참고</a></p>\n</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 트랜잭션에서에서 오류 발생시 어떻게 동작이 되나요?</summary>\n<p>\n<ul>\n<li>rollback\n<ul>\n<li>모든 연산을 취소(Undo)하는 연산</li>\n</ul>\n</li>\n<li>save point\n<ul>\n<li>지정한 point까지 트랜잭션을 부분 취소할 수 있다.</li>\n</ul>\n</li>\n</ul>\n</p>\n</details>\n<br>\n<br>\n<h4 id=\"정규형\" style=\"position:relative;\">정규형<a href=\"#%EC%A0%95%EA%B7%9C%ED%98%95\" aria-label=\"정규형 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<br>\n<details>\n<summary>&nbsp; 정규화에 대해서 설명해주세요</summary>\n<p>\n<ul>\n<li>함수의 종속성 이론</li>\n<li>테이블 규칙, 무결성, 중복성</li>\n<li>테이블을 분리</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 1NF 2NF 3NF 차례대로 설명해보시죠.</summary>\n<p>\n<p>1NF</p>\n<ul>\n<li>원자값</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/65283190/140326711-76d43bb1-d855-49da-98ed-fa7679d955a9.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/65283190/140326780-3a082072-b692-4818-8820-243fe233e6e1.png\" alt=\"image\"></p>\n<p>2NF</p>\n<ul>\n<li>완전 함수적 종속</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/65283190/140326943-3bc07909-cf7f-4278-bd1e-5317454cdc9c.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/65283190/140326999-b3e81b6f-176f-4820-8b21-e590af4993a2.png\" alt=\"image\"></p>\n<p>3NF</p>\n<ul>\n<li>이행적 함수 종속</li>\n<li>학번 -> 학과 로 착각 될 수 있음</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/65283190/140327117-9e7a37bd-31d2-4958-a843-46ac1b123c3d.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/65283190/140327164-dc387222-5ae7-420b-932e-63e7fb6b33fd.png\" alt=\"image\"></p>\n<p><a href=\"https://minimax95.tistory.com/49\">참고</a></p>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 3NF 와 BCNF의 다른점은? </summary>\n<p>\n<ul>\n<li>결정자(지정자)가 모두 후보키\n<ul>\n<li>함수 종속 관계를 유지시키는 것</li>\n</ul>\n<img src=\"https://user-images.githubusercontent.com/65283190/140328809-92ffc758-531f-4dd2-9bc3-964ca110d44d.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/65283190/140328920-9d76b81e-0b10-4502-abb0-1ec3654a274c.png\" alt=\"image\"></li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 비정규형에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>데이터의 무결성을 떨어트리는 대신 데이터베이스의 <strong>읽기성능을 향상</strong>\n<ul>\n<li>JOIN X</li>\n<li>CUD 성능 저하, 데이터 중복, 유지보수와 확장성</li>\n<li>역정규화, Entity 합체, Entity 분해</li>\n</ul>\n</li>\n</ul>\n</p>\n</details>\n<br>\n<br>\n<h4 id=\"키\" style=\"position:relative;\">키<a href=\"#%ED%82%A4\" aria-label=\"키 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<br>\n<details>\n<summary>&nbsp; 기본키, 대체키, 후보키에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>후보키 = 키본키 + 대체키</li>\n<li>튜플을 유일하게 식별할 수 있는 최소한의 속성의 집합</li>\n<li>값 중복 X, null X</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 부분키에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>약한 개체의 기본키</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; 약한 개체와 강한 개체에 대해서 설명해주세요.</summary>\n<p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>강한 개체</td>\n<td>누구에게도 지배되지 않는 독립적인 개체 (주체)</td>\n</tr>\n<tr>\n<td>약한 개체</td>\n<td>다른 개체의 존재 여부에 달려있는 개체 (관계)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>식별 관계, 비식별 관계</li>\n</ul>\n</p>\n</details>\n<br>\n<br>\n<br>\n<h3 id=\"-nosql\" style=\"position:relative;\">🗡 NoSQL<a href=\"#-nosql\" aria-label=\" nosql permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<br>\n<details>\n<summary>&nbsp; NoSQL에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>Not only SQL</li>\n<li>비정형 데이터,</li>\n</ul>\n</p>\n</details>\n<br>\n<br>\n<br>\n<h3 id=\"-기타\" style=\"position:relative;\">🗡 기타<a href=\"#-%EA%B8%B0%ED%83%80\" aria-label=\" 기타 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<br>\n<details>\n<summary>&nbsp; Partitioning(파티셔닝) 이란?</summary>\n<p>\n<ul>\n<li>큰 Table이나 인덱스를 관리하기 쉬운 단위로 분리하는 방법</li>\n<li>가용성, 관리용이성, 성능 (쿼리 분산)</li>\n<li>Join, 테이블과 인덱스를 같이 Partitioning</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; Partitioning 방법에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>분할 기준\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Range</td>\n<td>연속적인 숫자 기준으로 Partitioning (ex. 월별)</td>\n</tr>\n<tr>\n<td>List</td>\n<td>키의 값을 통해 분류(ex. 지역으로 묶음)</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>hash를 통해 균일하게</td>\n</tr>\n<tr>\n<td>Composite</td>\n<td>위의 기술을 결합시킴</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>방법\n<ul>\n<li>Horizontal\n<ul>\n<li>테이블 스키마에 변동은 없음</li>\n<li>하나의 서버가 고장나게 되면 데이터의 무결성 깨질 수 있음</li>\n</ul>\n</li>\n<li>Vertical\n<ul>\n<li>이미 정규화된 Data를 분리</li>\n<li>자주 사용하는 컬럼등을 분리시켜 성능을 향상</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://gmlwjd9405.github.io/2018/09/24/db-partitioning.html\">참고</a></li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; Sharding(샤딩) 이란?</summary>\n<p>\n<ul>\n<li>데이터 -> 여러 DB에 저장 (Horizontal Partitioning)</li>\n<li>DB 트래픽 분산</li>\n<li>프로그래밍 복잡도 up</li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; Sharding 방법에 대해서 설명해주세요.</summary>\n<p>\n<ul>\n<li>Module\n<ul>\n<li>PK % DB수</li>\n<li>데이터가 균일하게 분산</li>\n<li>DB 증설시 인덱스를 재정렬 해야 함</li>\n</ul>\n</li>\n<li>Range\n<ul>\n<li>PK 범위</li>\n<li>활성 계정에 따라 데이터가 몰릴 수 있음 (ex. 옛 유저가 1번 DB에 몰림)</li>\n</ul>\n</li>\n<li><a href=\"https://techblog.woowahan.com/2687/\">참고</a></li>\n</ul>\n</p>\n</details>\n<br>\n<details>\n<summary>&nbsp; Replication(리플리케이션) 이란?</summary>\n<p>\n<ul>\n<li>Query 분산</li>\n<li><code class=\"language-text\">Master / Slave</code>\n<ul>\n<li>여러 DBMS 시스템</li>\n<li><code class=\"language-text\">Slave</code> -> select</li>\n<li><code class=\"language-text\">Master</code> -> insert, update, delete</li>\n</ul>\n</li>\n<li>Master에서 발생한 DB 변동을 Slave 들에게 적용시킨다.\n<ul>\n<li>성공한 query 전달</li>\n<li>변동된 데이터 전달</li>\n<li>위 방법을 결함시킬 수도 있음</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://nesoy.github.io/assets/posts/20180216/3.png\" alt=\"이미지\"></p>\n</p>  \n</details>\n<br>\n<br>\n<br>\n<h3 id=\"-참고\" style=\"position:relative;\">🗡 참고<a href=\"#-%EC%B0%B8%EA%B3%A0\" aria-label=\" 참고 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%9A%94\">🗡 개요</a></p>\n</li>\n<li>\n<p><a href=\"#-rdbms\">🗡 RDBMS</a></p>\n<ul>\n<li><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98\">트랜잭션</a></li>\n<li><a href=\"#%EC%A0%95%EA%B7%9C%ED%98%95\">정규형</a></li>\n<li><a href=\"#%ED%82%A4\">키</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-nosql\">🗡 NoSQL</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B8%B0%ED%83%80\">🗡 기타</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%B0%B8%EA%B3%A0\">🗡 참고</a></p>\n</li>\n</ul>","excerpt":"🗡 개요 어플리케이션으로 부터의 독립 데이터 무결성 동시 접근 제어 DB Manage System 인덱스 트랜잭션 (동시 접근) 추가공간, 검색속도 주소위치-값 매핑, 정렬, Hash Table, B+ Tree 값에 대한 비교 O(1) O(Log(n)) 아니다 해당 secondary…","frontmatter":{"date":"2021.10.25","path":"/blog/cs/database","title":"Database 문제집","tags":["CS","면접"],"series":"면접 대비하기"},"fields":{"readingTime":{"text":"10 min read"}}}},"pageContext":{}},
    "staticQueryHashes": ["210451802","3649515864","63159454"]}