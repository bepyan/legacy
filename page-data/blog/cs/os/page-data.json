{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/cs/os",
    "result": {"data":{"markdownRemark":{"html":"<br>\n<br>\n<br>\n<h2 id=\"-운영체제\" style=\"position:relative;\">🗡 운영체제<a href=\"#-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C\" aria-label=\" 운영체제 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>시스템의 자원과 동작을 관리하는 소프트웨어</p>\n<div style=\"text-align:center\">\n  <img src=\"https://media2.giphy.com/media/1HQ0xMcxsSECY/giphy.gif?cid=ecf05e4760h9xh9j45krr0rqaqy32nvj5m4khcweolxlw69d&rid=giphy.gif&ct=g\" height=\"300\">\n  <p>내 마음속의 운영체제</p>\n</div>\n<br>\n<br>\n<br>\n<h2 id=\"-프로세스-관리\" style=\"position:relative;\">🗡 프로세스 관리<a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B4%80%EB%A6%AC\" aria-label=\" 프로세스 관리 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<br>\n<br>\n<h3 id=\"프로그램--프로세스--스레드\" style=\"position:relative;\">프로그램 · 프로세스 · 스레드<a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8--%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4--%EC%8A%A4%EB%A0%88%EB%93%9C\" aria-label=\"프로그램  프로세스  스레드 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<br>\n<p><strong>프로그램</strong></p>\n<ul>\n<li>어떤 작업을 실행하는 파일이다.\n<ul>\n<li>하드 디스크 등에 저장되어 있는 실행코드</li>\n</ul>\n</li>\n</ul>\n<br>\n<p><strong>프로세스</strong></p>\n<ul>\n<li>OS의 자원을 할당받아 실행되는 <strong>작업단위</strong>이다.\n<ul>\n<li>프로그램의 객체 인스턴스, 상태가 메모리에 적재된다.</li>\n</ul>\n</li>\n<li><strong>PCB</strong> Process Control Block\n<ul>\n<li>프로세스에 대한 중요 정보(PID, 상태, 스케줄링 정보, 메모리 정보 ...)를 저장한다.</li>\n<li>Context Switching 할 때에 작업의 진행 상황을 모두 저장.</li>\n</ul>\n</li>\n<li>프로세스의 주소공간\n<ul>\n<li>code: 컴파일된 코드</li>\n<li>data: 전역변수, 정적변수</li>\n<li>heap: 동적으로 할당되는 메모리</li>\n<li>stack: 지역변수, 매개변수</li>\n</ul>\n</li>\n</ul>\n<div style=\"text-align:center\">\n  <img src=\"https://gmlwjd9405.github.io/images/os-process-and-thread/process.png\" width=\"49%\">\n  <img src=\"https://gmlwjd9405.github.io/images/os-process-and-thread/thread.png\" width=\"49%\">\n</div>\n<br>\n<p><strong>스레드</strong></p>\n<ul>\n<li>프로세스가 할당 받은 자원을 이용하는 <strong>실행단위</strong>이다.</li>\n<li>프로세스의 code, data, heap영역을 공유한다.</li>\n</ul>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<h3 id=\"멀티-프로세스--멀티-스레드\" style=\"position:relative;\">멀티 프로세스 · 멀티 스레드<a href=\"#%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4--%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C\" aria-label=\"멀티 프로세스  멀티 스레드 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>효율성\n<ul>\n<li>스레드는 code, data, heap를 공유하기에 시스템 자원을 적게 소모한다.</li>\n<li>프로세스 Context Switching으로 인한 오버헤드도 줄일 수 있다.</li>\n<li>프로세스간 IPC 통신을 할 수 있지만 복잡하고 비용이 크다.</li>\n</ul>\n</li>\n<li>안정성\n<ul>\n<li>프로세스는 독립적이기에 하나에 문제가 발생해도 다른 프로세스는 정상적으로 실행이 된다.</li>\n<li>반면 스레드는 다든 스레드에게 영향을 주기에 이런 동기화 문제를 대비해야 한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<h3 id=\"스케줄링\" style=\"position:relative;\">스케줄링<a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\" aria-label=\"스케줄링 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><img src=\"https://user-images.githubusercontent.com/13609011/91695344-f2dfae80-eba8-11ea-9a9b-702192316170.jpeg\" alt=\"스케줄링\"></p>\n<ul>\n<li>Ready Queue는 CPU가 작업하기 전 대기하는 메모리 영역이다.</li>\n<li>Waiting에서는 이 프로세스에 대한 I/O 요청과 같은 이벤트에 대한 피드벡을 기다린다.</li>\n</ul>\n<br>\n<ul>\n<li>장기 스케줄러 ( Job ) New -> Ready</li>\n<li>단기 스케줄러 ( CPU ) Ready -> Running</li>\n<li>중기 스케줄러 ( Swapper ) Ready -> Suspended <del> 쫒겨나는거다. </del></li>\n</ul>\n<br>\n<br>\n<p><strong>CPU 스케줄링</strong></p>\n<ul>\n<li>선점 / 비선점\n<ul>\n<li>비선점형은 CPU에서 작업이 끝나면 Ready Queue 제일 앞에 있는 프로세스를 할당한다.</li>\n<li><del>이 CPU는 이제 제껍니다.</del> 최신 운영체제는 거의 선점형을 사용한다.</li>\n</ul>\n</li>\n<li>Starvation\n<ul>\n<li>작업순위에서 차별을 받아 계속 CPU에 할당받지 못하는 문제이다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>FCFS ( First Come First Served )\n<ul>\n<li>비선점</li>\n<li>먼저 온 프로세스를 선택한다.</li>\n<li>실행시간이 짧은 프로세스가 긴 프로세스의 작업을 계속 기다리게 되면서 CPU 사용률이 낮아진다.</li>\n</ul>\n</li>\n<li>SJF ( Shortest Job First )\n<ul>\n<li>비선점</li>\n<li>작업소요시간이 가장 짧은 프로세스를 선택한다.</li>\n<li>SRTF ( Shortest Remaining Time First )\n<ul>\n<li>선점형. Ready Queue에 더 짧은 프로세스가 있으면 바로 선점한다.</li>\n</ul>\n</li>\n<li>장점. 최소 평균 대기 시간을 보장할 수 있다.</li>\n<li>단점. 작업시간을 알기 어렵고 Starvation 문제가 발생할 수 있다.</li>\n</ul>\n</li>\n<li>PS ( Priority Scheduling )\n<ul>\n<li>선점 / 비선점 모두 가능하다.</li>\n<li>Aging\n<ul>\n<li>Ready Queue에 있는 시간이 길어지면 우선순위를 높여주면서 Starvation을 해결한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>RR ( Round Robin )</strong>\n<ul>\n<li>선점</li>\n<li>각 프로세스는 동일한 크기의 할당 시간(time quantum)을 갖는다. 할당시간이 지나면 Ready Queue 제일 뒤에 적재한다.</li>\n<li>할당시간이 길면 FCFS과 같아지고 짧으면 잦은 Context Swtich로 오버헤드가 발생한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<h3 id=\"프로세스-동기화\" style=\"position:relative;\">프로세스 동기화<a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%8F%99%EA%B8%B0%ED%99%94\" aria-label=\"프로세스 동기화 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>멀티프로세싱, 멀티스레드 환경에서 <strong>실행 순서 규칙</strong>을 통해 <strong>공유자원의 일관성</strong>을 보장하는 것.</p>\n<p>어떠한 문제를 방지하기 위함일까?</p>\n<br>\n<br>\n<p><strong>경쟁 상태 ( Race Condition )</strong></p>\n<ul>\n<li>\n<p>여러 프로세스가 공유 자원에 대해 동시에 접근할 때, 실행순서에 따라 결과가 달라지는 상태이다. (동시성 문제)</p>\n</li>\n<li>\n<p><strong>임계영역 ( Critical Section )</strong></p>\n<ul>\n<li>자원을 동시에 접근하면 안되는 코드 영역이다.</li>\n</ul>\n</li>\n<li>\n<p>상호배제를 통해 이를 해결할 수 있다. ( 자원은 한번에 한 프로세스만이 사용 )</p>\n<ul>\n<li>\n<p><strong>뮤텍스 ( Mutex )</strong></p>\n<ul>\n<li>Locking 메커니즘\n<ul>\n<li>오직 1개의 Lock만이 있다.</li>\n<li>프로세스가 Lock을 설정하고 임계영역에 진입하며 작업을 종료하면 Lock을 반환한다.</li>\n<li>Lock을 설정한 프로세스만이 Lock을 해제할 수 있다. (Semaphore와의 차이점)</li>\n<li>Lock을 갖기 전까지 busy waiting(무한루프)하지 않고 sleep상태로 들어 간다. (Spin Lock 과의 차이점)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>세마포어 ( Semaphore )</strong></p>\n<ul>\n<li>\n<p>Signaling 메커니즘</p>\n<ul>\n<li>뮤텍스와 달리 Lock을 설정하지않은 프로세스도 Signal를 보내서 락을 해제할 수 있다.</li>\n<li>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>카운팅 세마포어</td>\n<td>여러개의 Lock를 갖을 수 있다.</td>\n</tr>\n<tr>\n<td>이진 세마포어</td>\n<td>1개의 Lock을 갖고 있어 Mutex처럼 사용할 수 있다</td>\n</tr>\n<tr>\n<td>강성 &#x26; 약성 세마포어</td>\n<td>큐에서 프로세스를 깨우는 순서(FIFO)가 있는지.</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<details>\n<summary>&nbsp; 코드로 이해</summary>\n<p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">struct semaphore <span class=\"token punctuation\">{</span>\n  int count<span class=\"token punctuation\">;</span>\n  queueType queue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">semWait</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">semaphore s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  s<span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// enqueue 프로세스</span>\n      <span class=\"token comment\">// block 프로세스</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">semSignal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">semaphore s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  s<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// dequeue 프로세스</span>\n      <span class=\"token comment\">//</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n</p>\n</details>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<p><strong>데드락 ( Deadlock )</strong></p>\n<div style=\"text-align:center\">\n  <img src=\"https://lh3.googleusercontent.com/proxy/bL2pYcwcm4Jmo-B3IhRkUFpZg5KbSqGJXOjnAAn03N07QqJ4eHJGBtvvuQ6bPDxekdGpRRmVfS96_N0\" width=\"49%\">\n  <p>먼저 놔라..</p>\n</div>\n<ul>\n<li>서로가 서로의 자원을 받기를 무기한으로 대기하는 상황이다.</li>\n<li><strong>4가지 발생조건</strong> ( 이중 하나라도 성립되지 않으면 문제를 해결할 수 있다. )\n<ul>\n<li>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>상호 배제</strong> ( <strong>Mut</strong>ual <strong>Ex</strong>clusion )</td>\n<td>자원은 한번에 한 프로세스만이 사용한다.</td>\n</tr>\n<tr>\n<td>점유 대기</td>\n<td>자원을 점유하면서 추가로 점유해야하는 자원을 대기한다.</td>\n</tr>\n<tr>\n<td>비선점</td>\n<td>할당된 자원을 도중에 강제로 빼앗을 수 없다.</td>\n</tr>\n<tr>\n<td>순환 대기</td>\n<td>프로세스의 집합에서 순환 형태로 자원을 대기한다.</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li><strong>해결법</strong>\n<ul>\n<li>예방\n<ul>\n<li>4가지 조건 중 하나를 깨뜨린다.</li>\n<li>비용이 많이 발생하여 시스템의 성능을 떨어질 수 있다.</li>\n</ul>\n</li>\n<li>회피\n<ul>\n<li>서로가 대기하지 않는 안전상태 ( safe state )를 보장한다.</li>\n<li>은행원 알고리즘.\n<ul>\n<li>은행에서 오늘의 모든 출금을 충족시킬 수 있는 현금을 준비하는 것.</li>\n<li>자원 할당량을 사전에 파악하여</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>탐지 및 회복\n<ul>\n<li>데드락이 발생했는지 탐색을 하고 순환대기 상태를 깨뜨린다.\n<ul>\n<li>자원 할당 그래프를 통해 탐색.</li>\n<li>프로세스를 하나씩 중단 or 전체 중단.</li>\n<li>자원 선점.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<h2 id=\"-메모리-관리\" style=\"position:relative;\">🗡 메모리 관리<a href=\"#-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC\" aria-label=\" 메모리 관리 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<br>\n<br>\n<h3 id=\"페이징--세그멘테이션\" style=\"position:relative;\">페이징 · 세그멘테이션<a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%95--%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98\" aria-label=\"페이징  세그멘테이션 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>\n<p>프로세스는 각각 독립적인 메모리 공간을 갖는다. (서로 서로의 메모리 공간을 접근할 수 없다)</p>\n</li>\n<li>\n<p><strong>Swapping</strong></p>\n<ul>\n<li>round-robin와 같이 다중 프로그래밍 환경에서 CPU 할당 시간이 끝난 프로세스의 메모리를 교체해주는 기법</li>\n<li>간단히 말하면 [ 보조 기억장치 &#x3C;-> 메모리 ]</li>\n<li>메모리 공간이 부족할 때 진행된다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Fragmentation 단편화</strong></p>\n<ul>\n<li>메모리에 프로세스들을 할당하면서 틈새에 사용할 수 없는 빈공간이 생기는 것.</li>\n<li><code class=\"language-text\">외부 단편화</code> 프로세스 사이사이의 빈 공간</li>\n<li><code class=\"language-text\">내부 단편화</code> 프로세스가 할당 받은 메모리 중 남은 공간</li>\n</ul>\n</li>\n<li>\n<p>압축을 통해 빈공간을 끌어모아 자유공간을 확보할 수 있지만 작업효율이 좋지않다.</p>\n</li>\n<li>\n<p>빈 공간을 없애기 위해서 <code class=\"language-text\">불연속 메모리 할당</code> 기법을 사용한다.</p>\n</li>\n</ul>\n<br>\n<br>\n<p><strong>페이징 ( Paging )</strong></p>\n<ul>\n<li>메모리를 물리적으로 Frame 이라는 고정 크기로 분리했다면, 논리적으로는 Page라는 <strong>고정 크기</strong>의 블록으로 분리한다.</li>\n<li>Page와 Frame이 매핑되기에 Frame을 순서상관없이 메모리에 저장할 수 있다.</li>\n<li>내부 단편화 문제의 비중이 늘어나게 된다.</li>\n</ul>\n<br>\n<br>\n<p><strong>세그멘테이션 (Segmentation)</strong></p>\n<ul>\n<li>고정 크기가 아닌 <strong>서로 다른 크기</strong>의 segmentation으로 분리한다.</li>\n<li>테이블에 segment의 시작주소와 길이를 저장한다.</li>\n<li>외부 단편화 문제의 비중이 늘어나게 된다.</li>\n</ul>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<h3 id=\"페이지-교체\" style=\"position:relative;\">페이지 교체<a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4\" aria-label=\"페이지 교체 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><code class=\"language-text\">페이지 부재</code> 동작에 필요한 페이지가 물리 메모리 공간에 없으면 가져와야 한다.</li>\n<li>앞으로 자주 사용되는 페이지를 메모리에 남겨 두는 것이 가장 이상적이다.</li>\n</ul>\n<br>\n<br>\n<ul>\n<li>\n<p><strong>FIFO ( Frist In Frist Out )</strong></p>\n<ul>\n<li>메모리에 가장 오래된 페이지 교체</li>\n</ul>\n</li>\n<li>\n<p><strong>OPT ( Optimal Page Replacement )</strong></p>\n<ul>\n<li>가장 오랫동안 사용되지 않을 페이지 찾아 교체</li>\n<li>하지만 찾는 것이 사실상 불가능</li>\n</ul>\n</li>\n<li>\n<p><strong>LRU ( Least Recfently Used )</strong></p>\n<ul>\n<li>최적 알고리즘</li>\n<li>가장 오래 사용되지 않는 페이지를 교체</li>\n</ul>\n</li>\n<li>\n<p><strong>LFU (Least Frequently Used)</strong></p>\n<ul>\n<li>참조 횟수가 가장 적은 페이지를 교체</li>\n</ul>\n</li>\n<li>\n<p><strong>MFU (Most Frequently Used)</strong></p>\n<ul>\n<li>참조 횟수가 가장 많은 페이지 교체</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<h3 id=\"가상메모리\" style=\"position:relative;\">가상메모리<a href=\"#%EA%B0%80%EC%83%81%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"가상메모리 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>프로세스의 일부분만 메모리에 적재하는 기법.\n<ul>\n<li>프로그램이 물리 메모리 크기에 제약을 받지 않는다.</li>\n<li>더 많은 프로그램을 동시 실행할 수 있게 되어 CPU 이용률과 처리율은 높아진다.</li>\n<li>swap에 필요한 입출력이 줄어들기 때문에 프로그램들이 빠르게 실행된다.</li>\n</ul>\n</li>\n<li><strong>가상 주소 공간</strong>\n<ul>\n<li>물리 메모리에 자장하지 않고 다른 저장공간을 논리적으로 구분되는 곳</li>\n</ul>\n</li>\n<li>요구 페이징 전략\n<ul>\n<li>초기에 프로세스가 필요한 것들만 물리 메모리에 저장</li>\n<li>한 번도 접근되지 않은 페이지는 물리 메모리에 적재되지 않는다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<h3 id=\"캐시\" style=\"position:relative;\">캐시<a href=\"#%EC%BA%90%EC%8B%9C\" aria-label=\"캐시 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>캐시 메모리는 속도가 빠른 장치와 느린 장치간의 속도차에 따른 병목 현상을 줄이기 위한 범용 메모리이다.</li>\n<li>캐시의 <strong>지역성 원리</strong>\n<ul>\n<li><code class=\"language-text\">적중율(Hit rate)</code>을 극대화하기 위함이다.\n<ul>\n<li>CPU가 참조할 데이터가 캐시에 있으면 적중.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>캐싱 라인\n<ul>\n<li>데이터를 저장할 때 특정 자료구조를 사용하여 묶음으로 저장한다.</li>\n<li>DB의 인덱싱과 비슷한 개념</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<h2 id=\"-번외\" style=\"position:relative;\">🗡 번외<a href=\"#-%EB%B2%88%EC%99%B8\" aria-label=\" 번외 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><strong>Blocking / Non-blocking</strong></p>\n<ul>\n<li><strong>호출된 함수</strong>가 자신의 일을 마칠 때까지 제어권을 가지고 있는지?</li>\n<li><code class=\"language-text\">기다린다</code> = 대기 큐에 머문다.</li>\n</ul>\n<p><strong>Synchronous / Asynchronous</strong></p>\n<ul>\n<li><strong>호출된 함수</strong>의 수행 결과 및 종료를 호출된 함수 혼자 직접 신경 쓰고 처리하는지 (callback)</li>\n<li>system call의 완료를 기다리는지 ??</li>\n<li><code class=\"language-text\">callback</code>이란?\n<ul>\n<li>다른 함수의 인자로써 이용되는 함수</li>\n<li>어떤 이벤트에 의해 호출되어지는 함수</li>\n<li>called at the back</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<h2 id=\"-참고\" style=\"position:relative;\">🗡 참고<a href=\"#-%EC%B0%B8%EA%B3%A0\" aria-label=\" 참고 permalink\" class=\"anchor-header after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://gyoogle.dev/blog/computer-science/operating-system/Process%20vs%20Thread.html\">https://gyoogle.dev/blog/computer-science/operating-system/Process%20vs%20Thread.html</a></li>\n<li><a href=\"https://gmlwjd9405.github.io/2018/09/14/process-vs-thread.html\">https://gmlwjd9405.github.io/2018/09/14/process-vs-thread.html</a></li>\n<li><a href=\"https://kukuta.tistory.com/281\">데드락</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C\">🗡 운영체제</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B4%80%EB%A6%AC\">🗡 프로세스 관리</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8--%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4--%EC%8A%A4%EB%A0%88%EB%93%9C\">프로그램 · 프로세스 · 스레드</a></li>\n<li><a href=\"#%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4--%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C\">멀티 프로세스 · 멀티 스레드</a></li>\n<li><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\">스케줄링</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%8F%99%EA%B8%B0%ED%99%94\">프로세스 동기화</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC\">🗡 메모리 관리</a></p>\n<ul>\n<li><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%95--%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98\">페이징 · 세그멘테이션</a></li>\n<li><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4\">페이지 교체</a></li>\n<li><a href=\"#%EA%B0%80%EC%83%81%EB%A9%94%EB%AA%A8%EB%A6%AC\">가상메모리</a></li>\n<li><a href=\"#%EC%BA%90%EC%8B%9C\">캐시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%B2%88%EC%99%B8\">🗡 번외</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%B0%B8%EA%B3%A0\">🗡 참고</a></p>\n</li>\n</ul>","excerpt":"🗡 운영체제 시스템의 자원과 동작을 관리하는 소프트웨어 🗡 프로세스 관리 프로그램 · 프로세스 · 스레드 프로그램 어떤 작업을 실행하는 파일이다. 하드 디스크 등에 저장되어 있는 실행코드 프로세스 OS…","frontmatter":{"date":"2021.10.24","path":"/blog/cs/os","title":"Operating System 총정리","tags":["CS","면접"],"series":"면접 대비하기"},"fields":{"readingTime":{"text":"15 min read"}}}},"pageContext":{}},
    "staticQueryHashes": ["210451802","3649515864","63159454"]}